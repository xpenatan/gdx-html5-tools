plugins {
    id 'java'
}

group = project.groupId

def module_name = "generator-core"

sourceSets.main.java.srcDirs = ["src/main/java/"]

configurations {
    includeDep
    implementation.extendsFrom includeDep
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx:$project.gdxVersion"
    includeDep "com.github.xpenatan.jDear-Imgui:core:$project.jDearImguiVersion"
    includeDep "com.github.xpenatan.jDear-Imgui:gdx:$project.jDearImguiGdxVersion"
    includeDep "com.github.xpenatan.jDear-Imgui:core-platform:$project.jDearImguiVersion:natives-desktop"

    includeDep project(":backends:backend-teavm:backend-teavm")
    includeDep project(":backends:backend-web:backend-web")
    includeDep project(":extensions:gdx-freetype-teavm")
    includeDep project(":extensions:gdx-bullet:gdx-bullet-teavm")
    includeDep project(":extensions:gdx-box2d:gdx-box2d-teavm")

//    implementation "com.github.xpenatan.gdx-teavm:backend-web:1.0.0-SNAPSHOT"
//    implementation "com.github.xpenatan.gdx-teavm:backend-teavm:1.0.0-SNAPSHOT"
//    implementation "com.github.xpenatan.gdx-teavm:backend-teavm-native:1.0.0-SNAPSHOT"
//    implementation "com.github.xpenatan.gdx-teavm:gdx-bullet-teavm:1.0.0-SNAPSHOT"
//    implementation "com.github.xpenatan.gdx-teavm:gdx-box2d-teavm:1.0.0-SNAPSHOT"
//    implementation "com.github.xpenatan.gdx-teavm:gdx-freetype-teavm:1.0.0-SNAPSHOT"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task fromClasses(type: Jar) {
    from(sourceSets.main.output) {
    }
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        classes(MavenPublication) {
            version project.gdxHtmlVersion + project.gdxHtmlType
            project.version = project.gdxHtmlVersion + project.gdxHtmlType
            artifactId module_name
            artifact fromClasses

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.includeDep.allDependencies.each {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}